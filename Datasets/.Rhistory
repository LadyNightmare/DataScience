library(linprog)
install.packages('linprog')
library(linprog)
funcObjetivo<-c(4,6,5,9,8,7,9,4,7,8,7,6)
coefMatriz<-(c(1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1) ncol=3)
coefMatriz<-(c(1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1), ncol=3)
coefMatriz<-matrix(c(1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1), ncol=3)
b<-c('<=','<=','<=','=>','=>','=>','=>')
matrizRestr<-c(100,200,150,100,115,80,105)
b<-c('<=','<=','<=','>=','>=','>=','>=')
solucion<-solveLP(funcObjetivo, b,coefMatriz, 0, matrizRestr)
solucion<-solveLP(funcObjetivo, b,matrizRestr, 0, coefMatriz)
solucion<-solveLP(funcObjetivo, matrizRestr, coefMatriz, 0, b)
coefMatriz<-matrix(c(1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1), ncol=12)
solucion<-solveLP(funcObjetivo, b,matrizRestr, 0, coefMatriz)
solucion<-solveLP(funcObjetivo, matrizRestr, coefMatriz, 0, b)
summary(solucion)
solucion$solution
coefMatriz
coefMatriz<-matrix(c(1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1), ncol=7)
solucion<-solveLP(funcObjetivo, matrizRestr, coefMatriz, 0, b)
solucion<-solveLP(funcObjetivo, b,matrizRestr, 0, coefMatriz)
solucion<-solveLP(funcObjetivo, matrizRestr, coefMatriz, 0, b)
coefMatriz
library(markovchain)
install.packages("markovchain")
install.packages(c("cli", "igraph", "plyr", "visNetwork"))
library(markovchain)
install.packages("diagram")
library(diagram)
library(shape)
library(diagram)
tmA <- matrix(c(0.3,0.3,0.4,0.4,0.4,0.2,0.5,0.3,0.2),nrow = 3, byrow = TRUE)
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Centro","Este","Oeste"), name="MarkovChain A")
dtmcA
plot(dtmcA)
dtmcA
plotmat(tmA,pos = c(1,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
stateNames <- c("Centro","Este","Oeste")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c(0.3,0.3,0.4,0.4,0.4,0.2,0.5,0.3,0.2),nrow = 3, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Centro","Este","Oeste"), name="MarkovChain A")
dtmcA
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Centro","Este","Oeste")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(1,0,0)
steps<-2
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c(0.8671, 0.0024, 0.1270, 0.0035, 0, 1, 0, 0, 0, 0, 0, 0, 0.8623, 0, 0.1377, 0, 0, 0.9, 0.1, 0, 0, 0, 0, 0, 1),nrow = 5, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte"), name="MarkovChain A")
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(1,0,0)
steps<-3
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c(0.8671, 0.0024, 0.1270, 0.0035, 0, 1, 0, 0, 0, 0, 0, 0, 0.8623, 0, 0.1377, 0, 0, 0.9, 0.1, 0, 0, 0, 0, 0, 1),nrow = 5, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte"), name="MarkovChain A")
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(0,0,1,0,0)
steps<-3
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c( 0.8720,0.0273,0.0823,0.0184,0,1,0,0,0,0,0,0,0.8771,0,0.1229,0,0,0.9,0.1,0,0,0,0,0,1),nrow = 5, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte"), name="MarkovChain A")
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,2,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(0,0,1,0,0)
steps<-3
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c( 0.8720,0.0273,0.0823,0.0184,0,1,0,0,0,0,0,0,0.8771,0,0.1229,0,0,0.9,0.1,0,0,0,0,0,1),nrow = 5, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte"), name="MarkovChain A")
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,3,1),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(0,0,1,0,0)
steps<-3
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c(0.8671, 0.0024, 0.1270, 0.0035, 0, 1, 0, 0, 0, 0, 0, 0, 0.8623, 0, 0.1377, 0, 0, 0.9, 0.1, 0, 0, 0, 0, 0, 1),nrow = 5, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte"), name="MarkovChain A")
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,3,1),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(0,0,1,0,0)
steps<-3
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c(0.8671, 0.0024, 0.1270, 0.0035, 0, 1, 0, 0, 0, 0, 0, 0, 0.8623, 0, 0.1377, 0, 0, 0.9, 0.1, 0, 0, 0, 0, 0, 1),nrow = 5, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte"), name="MarkovChain A")
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,3,1),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(0,0,1,0,0)
steps<-3
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c( 0.8720,0.0273,0.0823,0.0184,0,1,0,0,0,0,0,0,0.8771,0,0.1229,0,0,0.9,0.1,0,0,0,0,0,1),nrow = 5, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte"), name="MarkovChain A")
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,3,1),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(0,0,1,0,0)
steps<-3
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
# https://rpubs.com/JanpuHou/326048
library(markovchain)
library(diagram)
# define a transition matrix
tmA <- matrix(c(0.8671, 0.0024, 0.1270, 0.0035, 0, 1, 0, 0, 0, 0, 0, 0, 0.8623, 0, 0.1377, 0, 0, 0.9, 0.1, 0, 0, 0, 0, 0, 1),nrow = 5, byrow = TRUE)
# create the DTMC
dtmcA <- new("markovchain",transitionMatrix=tmA, states=c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte"), name="MarkovChain A")
dtmcA
plot(dtmcA)
#Visulization by plotmat function from diagram package
stateNames <- c("Respuesta","Complicaciones Limitadas","Progreso", "Complicaciones Graves", "Muerte")
row.names(tmA) <- stateNames; colnames(tmA) <- stateNames
plotmat(tmA,pos = c(1,3,1),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .6,
self.shifty = -.01,
self.shiftx = .14,
main = "Markov Chain")
# It is possible to simulate states distribution after n-steps
# Empezamos en el centro
initialState<-c(0,0,1,0,0)
steps<-3
finalState<-initialState*dtmcA^steps #using power operator
finalState
steadyStates(dtmcA)
install.packages(c("digest", "dplyr", "jsonlite", "RcppArmadillo", "rlang", "rstudioapi", "stringi", "tidyselect", "yaml"))
2+3
install.packages("devtools")
install.packages("devtools")
install.packages(c("usethis", "covr", "DT", "httr", "roxygen2", "rversions"))
install.packages(c("curl", "openssl"))
install.packages("libssl-dev")
clear
clear
clean
quit()
pwd
setwd("~/Desktop/All/4thYear/LCC/Datasets")
df = read.csv('UKGas.csv', header = TRUE)
df = read.csv('UKgas.csv', header = TRUE)
consumo.de.gas
df
value[1:10]
df[1:10]
df[[1:10]
df[[1:10]]
df[[value = 1:10]]
df[[value < 10]]
funcObjetivo[1:50 -3]
funcObjetivo[1:10 -3]
funcObjetivo[-3]
funcObjetivo[-4]
funcObjetivo
funcObjetivo[1:12]
funcObjetivo[c(2)]
funcObjetivo[c(2,4,6:12)]
---
title: "Vignette Title"
author: "Vignette Author"
date: "`r Sys.Date()`"
output:
prettydoc::html_pretty:
theme: cayman
highlight: github
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
Vignettes are long form documentation commonly included in packages. Because
they are part of the distribution of the package, they need to be as compact as
possible. The `html_pretty` output format in package
[**prettydoc**](https://github.com/yixuan/prettydoc/) , an alternative
to `html_document` and `html_vignette` contained in the `rmarkdown` package,
is able to generate small and nice HTML pages.
## Styles
Currently `html_pretty` supports three page themes, `cayman` (the default),
`tactile`, and `architect`. And there are also two syntax highlight styles:
`github` to mimic the syntax highlight on Github, and `vignette` that is used by
`html_vignette`. If no highlight parameter is given, the default style created
by Pandoc will be used.
The theme and highlight styles can be given in the document metadata,
for example:
```yaml
output:
prettydoc::html_pretty:
theme: cayman
highlight: github
```
## Happy Knitting!
Feel free to use the `knitr` infrastructure with dozens of tunable options in
your package vignette.
```{r fig.width=6, fig.height=6, fig.align='center'}
set.seed(123)
n <- 1000
x1  <- matrix(rnorm(n), ncol = 2)
x2  <- matrix(rnorm(n, mean = 3, sd = 1.5), ncol = 2)
x   <- rbind(x1, x2)
head(x)
smoothScatter(x, xlab = "x1", ylab = "x2")
```
You can also include code snippets of languages other than R, but note that
the block header has no curly brackets around the language name.
```cpp
// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) {
return x * 2;
}
```
You can write math expressions, e.g. $Y = X\beta + \epsilon$,
footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.
```{r, echo=FALSE, results='asis'}
knitr::kable(head(iris, 10))
```
## Stay Tuned
Please visit the [development page](https://github.com/yixuan/prettydoc/) of the
`prettydoc` package for latest updates and news. Comments, bug reports and
pull requests are always welcome.
